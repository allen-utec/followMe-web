service: followme
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  memorySize: 256
  iam:
    role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
  environment:
    APP_NAME: ${sls:stage}-${self:service}

functions:
  save_user:
    handler: save_user.lambda_handler
    environment:
      TABLE_USERS: !Ref TableUsers
    events:
      - sns:
          arn: !Ref TopicLocation
          topicName: ${self:provider.environment.APP_NAME}-TopicLocation
          filterPolicy:
            counter:
              - 1
          filterPolicyScope: MessageAttributes
  send_location:
    handler: send_location.lambda_handler
    environment:
      TOPIC_LOCATION_ARN: !Ref TopicLocation
    events:
      - http:
          path: /locations
          method: post
          cors: true
          integration: lambda
  get_locations:
    handler: get_locations.lambda_handler
    environment:
      TABLE_LOCATIONS: !Ref TableLocations
    events:
      - http:
          path: /locations/{tenant_id}/{route_id}
          method: get
          cors: true
          integration: lambda
  save_location:
    handler: save_location.lambda_handler
    environment:
      TABLE_LOCATIONS: !Ref TableLocations
    events:
      - sqs:
          arn: !GetAtt QueueLocation.Arn
  save_route:
    handler: save_route.lambda_handler
    environment:
      BUCKET_ROUTE: !Ref BucketRoute
      TOPIC_ROUTE_ARN: !Ref TopicRoute
    events:
      - http:
          path: /routes
          method: post
          cors: true
          integration: lambda

resources:
  Resources:
    # DynamoDB
    TableUsers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.APP_NAME}-t_users
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    TableLocations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.APP_NAME}-t_locations
        AttributeDefinitions:
          - AttributeName: route_id
            AttributeType: S
          - AttributeName: location_id
            AttributeType: S
        KeySchema:
          - AttributeName: route_id
            KeyType: HASH
          - AttributeName: location_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    # SNS
    TopicLocation:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.APP_NAME}-TopicLocation
    SubscriptionLocation:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref TopicLocation
        Endpoint: !GetAtt QueueLocation.Arn
    TopicRoute:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.APP_NAME}-TopicRoute
    SubcriptionRoute:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn: !Ref TopicRoute
        Endpoint: allen.velasco@utec.edu.pe
    # SQS
    QueueLocation:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.APP_NAME}-QueueLocation
    QueueLocationPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref QueueLocation
        PolicyDocument:
          Statement:
            - Action: sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt QueueLocation.Arn
              Principal:
                Service: sns.amazonaws.com
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref TopicLocation
    # S3
    BucketRoute:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.APP_NAME}-route-snapshots
